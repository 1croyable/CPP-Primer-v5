unsigned u = 10, u2 = 42;
cout << u2 - u << endl; 结果：32
cout << u - u2 << endl; 结果：32对应的二进制翻转之后+1（或最大值-32+1）

int i = 10, i2 = 42;
cout << i2 - i << endl; 32
cout << i - i2 << endl; -32
cout << i - u << endl; 0
cout << u - i << endl; 0;

注意：
unsigned int可以縮寫為unsigned
当既有int又有无符号数时，int会被转换成无符号数，并且运算结果不能是一个负值



网上的资料：
在 C++ 中没有表示负值的规则。因此，供应商可以选择他们的实现细节来表示 C++ 中的负值。

但是，有三种常用的方法来表示负数。

1、
有符号量级 - 表示有符号数的最少使用方法。在这种方法中，固定一个特殊位来表示数字的符号。

其余位表示数字的大小。然而，这种方法在计算机中实现时存在严重问题，尤其是在对负数执行算术运算时。

2、
一个的补码 - 在这种方法中，负数通过将 0 位转换为 1 来表示，反之亦然，从相应正数的位表示。

请记住，最左边的位代表数字的符号。0 代表正号，1 代表负号。

但是，这种方法有一个缺陷，即在使用这种方法时，+0 和 -0 有两种不同的表示形式。

3、
二进制补码 - 这是表示负数的最常用方法。在这种方法中，固定一个符号位来表示符号。

如果遇到负数，则计算其位表示。之后，位被翻转，并加 1。

让我们看一个例子。

Number: -6
用2进制表示6: 000110
Two's complement: 111001+1 = 111010
So the number is represented as 1111010（符号位是1）