-------------------------------------------------------------2.27
int i = -1, &r = 0;                 不合法，一个非常引用不能引用字面值常量
int *const p2 = &i2;                合法
const int i = -1, &r = 0;           合法，常量引用可以绑定到一个临时量对象，从而引用字面值常量
const int *const p3 = &i2;          合法
const int *p1 = &i2;                合法
const int &const r2;                不合法，引用只有底层的
const int i2 = i, &r = i;           合法

-------------------------------------2.28
int i, *const cp;                   定义一个整数i，定义一个顶层const的int指针，但是没有初始值，因此         不合法
int *p1, *const p2;                 定义一个指向整数的普通指针，和一个顶层const指针，同上，因此             不合法
const int ic, &r = ic;              定义一个整数常量对象ic，但是未指定初始值，因此                          不合法
const int *const p3;                定义一个顶层和底层const的指针p3，但是没有初始值，因此                   不合法
const int *p;                       定义一个底层const的int指针对象p，因此                                  合法

----------------------------------------2.29
i = ic;                             这里仅仅把ic中的对象拷贝赋值到i中，因此是可以的，与ic的常量性质无关     合法
p1 = p3;                            p3包含底层const，不会改变它所指向的那个int对象，但是p1会改变，因此      不合法
p1 = &ic;                           p1不是底层const指针，我们可以利用p1修改它指向的对象，而不能修改ic       不合法 
p3 = &ic;                           p3不仅是底层const的，还是一个顶层const的指针，它的指针值不能被改变      不合法 
p2 = p1;                            同上                                                                 不合法 
ic = *p3;                           ic是const限定的对象，不能被修改，放在赋值符号的左边肯定是错的           不合法